#!/bin/bash -vx

set -euo pipefail
shopt -s nullglob

tmp=/tmp/git-dirsync-$$
trap 'rm -rf $tmp' 0
mkdir $tmp

not_implemented() {
  echo "NOT YET IMPLEMENTED"
  exit 99
}

# CMD: pull -- pull changes from remote repo
cmd_pull() {
  not_implemented
}

# CMD: checkpoint -- run a temporary checkpoint of local files
cmd_checkpoint() {
  if pull_changes; then
    pull_worked=true
  else
    pull_worked=false
  fi

  create_branch_checkpoint

  if $pull_worked ; then
    create_main_checkpoint
  fi
}

# CMD: flush -- flush today's checkpoints into a daily commit
cmd_flush() {
  if pull_changes; then
    pull_worked=true
  else
    pull_worked=false
  fi

  if $pull_worked ; then
    amend_checkpoint_commit
    delete_checkpoint_branch
  fi
}

# Delete the checkpoint local and remote branches
delete_checkpoint_branch() {
  currentCommit=$(git rev-parse HEAD)
  currentBranch=$(git symbolic-ref --short HEAD)
  checkpointBranch="checkpoint/$currentBranch/$(hostname)"
  origin="$(git config "branch.$currentBranch.remote")"

  if [ -n "$(git branch -l "$checkpointBranch")" ] ; then
    git branch -D "$checkpointBranch"
  fi

  if [ -n "$(git ls-remote --heads "$origin" "$checkpointBranch")" ] ; then
    git push -d "$origin" "$checkpointBranch"
  fi
}

# amend the current checkpoint commit if it exists
amend_checkpoint_commit() {
  targetCommitMessage="Checkpoint on $(hostname) for $(date +%Y-%m-%d)"
  currentCommitMessage="$(git log -1 --format=%s)"
  newCommitMessage="Periodic commit on $(date '+%Y-%m-%d %H:%M:%S').

Committed from $(hostname)."

  add_files

  if [ "$targetCommitMessage" == "$currentCommitMessage" ] ; then
    git commit --amend -m "$newCommitMessage"
    git push -f
  elif [ -n "$(git status --porcelain)" ] ; then
    git commit -m "$newCommitMessage"
    git push
  fi
}

# CMD: help -- print this message
cmd_help() {
cat << EOF
usage: $0 <CMD> [OPTIONS]
CMD is one of:
EOF

awk -F : '/^# *CMD: /{print $2}' "$0"
}

# amend the current main branch checkpoint commit
create_main_checkpoint() {
  targetCommitMessage="Checkpoint on $(hostname) for $(date +%Y-%m-%d)"
  currentCommitMessage="$(git log -1 --format=%s)"

  add_files

  if [ -z "$(git status --porcelain)" ] ; then
    # nothing to commit
    return 0
  fi

  if [ "$targetCommitMessage" == "$currentCommitMessage" ] ; then
    git commit --amend --no-edit
    git push -f
  else
    git commit -m "$targetCommitMessage"
    git push
  fi
}

# Pull changes from the upstream.
# If there's a conflict, exit.  If there's no conflict, merge it in and allow git to merge or ff-merge as necessary.
pull_changes() {
  git fetch
  base="$(git merge-base HEAD FETCH_HEAD)"
  current="$(git rev-parse HEAD)"

    if [ "$current" != "$base" ] ; then
      git merge-tree "$base" HEAD FETCH_HEAD > $tmp/merge-result.txt

    if is_merge_conflict $tmp/merge-result.txt ; then
      return 1
    fi

    git merge
  fi
}

# check the given file to see if there are merge conflict indicators
is_merge_conflict() {
  cat "$1"
  grep -s "<<" "$1"
}

# add all files which have changed or are "other" and match the right thing
add_files() {
  regex="$(git config dirsync.file-regex || true)"
  # Look for all the files -- which might have spaces in their names
  git ls-files -om --exclude-standard | while read -r file; do
    if [ -z "$regex" ] ; then
     git add "$file"
    else
      for r in $regex ; do
        # shellcheck disable=SC2053
        if [[ "$file" =~ $r ]] ;then
               git add "$file"
               break
        fi
      done
    fi
  done
}

# Create a checkpoint commit on the checkpoint branch
create_branch_checkpoint() {
  currentCommit=$(git rev-parse HEAD)
  currentBranch=$(git symbolic-ref --short HEAD)
  checkpointBranch="checkpoint/$currentBranch/$(hostname)"
  origin="$(git config "branch.$currentBranch.remote")"


  if [ -n "$(git branch -l "$checkpointBranch")" ] ; then
    # there *is* such a branch, so
    # Move onto the checkpoint branch
    git symbolic-ref HEAD "refs/heads/$checkpointBranch"
    git reset
  else
    git checkout -b "$checkpointBranch"
  fi

  add_files

  git commit -m "Checkpoint at $(date '+%Y-%m-%d %H:%M')" || true

  git push "$origin" "$checkpointBranch"

  # Now recover the original branch -- this should not change the working tree
  git symbolic-ref HEAD "refs/heads/$currentBranch"
  git reset "$currentCommit"
}

main() {
  if [ -z "${1:-}" ] ; then
    cmd_help
    exit 1
  fi

  cmd="$1"; shift

  eval "cmd_$cmd" "$@"
}


main "$@"